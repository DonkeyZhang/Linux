Subversion基本操作
##################################
Subversion是一个自由/开源的版本控制系统

脚本
svn里

自动变成v1 v2 v3 v4 
自己的PPT放在SVN里可以找到几年前的
yum
svn://

file://

客户端软件
Repository
版本库数是版本控制的核心
1.
ftp共享的缺点
ftp：a.txt--v1
A:a.txt--v2
B:a.txt--v2
C:a.txt--v2
修改可能被覆盖
重命名
不整合
2.
加锁
要等着上一个写完
解锁
###############################3


1.1 问题

本案例要求先快速搭建好一台Subversion服务器，并测试该版本控制软件：
创建版本库
导入初始化数据
检出数据至用户本地副本
对本地副本进行增删改查等操作

1.2 方案

使用YUM安装subversion软件，使用svn客户端工具连接svnserver服务器并测试版本控制软件。

1.3 步骤

实现此案例需要按照如下步骤进行。
步骤一：安装Subversion服务器
1）YUM安装subversion软件
[root@web1 ~]# yum -y install subversion
[root@web1 ~]# rpm -q subversion

2)创建版本库
[root@web1 ~]# mkdir /var/svn/ 
[root@web1 ~]# svnadmin create /var/svn/project
[root@web1 ~]# ls /var/svn/project/
conf/  db/  format  hooks/  locks/  README.txt

3）本地导入初始化数据
[root@web1 ~]# cd /usr/lib/systemd/system/ 
[root@web1 ~]# svn import . file:///var/svn/project/ -m "Init Data"

4）修改配置文件，创建账户与密码
#############################

所有配置文件，要求顶头写，开头不要有空格。

##############################
[root@web1 ~]# vim /var/svn/project/conf/svnserve.conf


[general]
### These options control access to the repository for unauthenticated
### and authenticated users.  Valid values are "write", "read",
### and "none".  The sample settings below are the defaults.
anon-access = none
//19行，匿名无任何权限

auth-access = write
//20行，有效账户可写

password-db = passwd
//27行，密码文件

authz-db = authz
//34行，ACL访问控制列表文件


[root@web1 ~]# vim /var/svn/project/conf/passwd 
… …
[users]
harry = 123456
//用户名和密码
tom = 123456
//用户名和密码

[/test] 仓库的根
[root@web1 ~]# cat /var/svn/project/conf/authz 
[/]                                //定义ACL访问控制
harry = rw                        //用户对项目根路径可读可写
tom = rw


5）启动服务
[root@web1 ~]# svnserve -d  -r /var/svn/project
[root@web1 ~]# netstat -nutlp |grep svnserve
tcp        0      0 0.0.0.0:3690    0.0.0.0:*    LISTEN      4043/svnserve  

######################
-d 放后台 -r绝对路径
##################

备注：启动服务也可以使用svnserve -d启动，但客户端访问时需要指定绝对路径（svn://服务器IP/var/svn/project）。
svn://


步骤二：客户端测试(192.168.2.200)

1）将服务器上的代码下载到本地
[root@web2 ~]# cd /tmp
[root@web2 ~]# svn --username harry --password 123456 \
co svn://192.168.2.100/ code        
################################

空格 code 自动在/tmp下创建目录code 

co checkout 下载 
############################
//建立本地副本,从服务器192.168.2.100上co下载代码到本地code目录
//用户名harry,密码123456
-----------------------------------------------------------------------
ATTENTION!  Your password for authentication realm:
   <svn://127.0.0.1:3690> b72f45f0-bbe5-4a0c-ad4a-37f52704f0b1
can only be stored to disk unencrypted!  You are advised to configure
your system so that Subversion can store passwords encrypted, if
possible.  See the documentation for details.
You can avoid future appearances of this warning by setting the value
of the 'store-plaintext-passwords' option to either 'yes' or 'no' in
'/root/.subversion/servers'.
-----------------------------------------------------------------------
Store password unencrypted (yes/no)? yes            //提示是否保存密码
[root@web2 ~]# cd /tmp/code
[root@web2 code]# ls
[root@web2 code]# vim user.slice                 //挑选任意文件修改其内容

[root@web2 code]# svn ci -m "modify user"        //将本地修改的数据同步到服务器
                            commit提交

[root@web2 code]# svn update                    //将服务器上新的数据同步到本地
                                
[root@web2 code]# svn info     svn://192.168.2.100    //查看版本仓库基本信息

[root@web2 code]# svn log     svn://192.168.2.100    //查看版本仓库的日志

[root@web2 code]# echo "test" > test.sh        //本地新建一个文件
[root@web2 code]# svn ci -m "new file"            //提交失败，该文件不被svn管理
[root@web2 code]# svn add test.sh                //将文件或目录加入版本控制
[root@web2 code]# svn ci -m "new file"            //再次提交，成功


[root@web2 code]# svn mkdir subdir                //创建子目录
[root@web2 code]# svn rm timers.target            //使用svn删除文件
[root@web2 code]# svn ci -m "xxx"                //提交一次代码



[root@web2 code]# vim umount.target            //任意修改本地的一个文件
[root@web2 code]# svn diff                     //查看所有文件的差异
看不到具体几行
[root@web2 code]# svn diff umount.target        //仅查看某一个文件的差异
[root@web2 code]# svn cat svn://192.168.2.100/reboot.target    //查看服务器文
件的内容


[root@web2 code]# sed -i 'd' tmp.mount            
//删除文件所有内容，但未提交
[root@web2 code]# svn revert tmp.mount            
//还原tmp.mount文件
[root@web2 code]# rm -rf  *.target                
//任意删除若干文件
[root@web2 code]# svn update                    
//还原


[root@web2 code]# sed -i '1a #test###' tuned.service
//修改本地副本中的代码文件
[root@web2 code]# svn ci  -m  "xxx"
//提交代码

[root@web2 code]# svn merge -r7:2    tuned.service    
//将文件从版本7还原到版本2
使用svn命令测试svnserver服务时可以使用的命令列表如表-1所示。

表－1 svn命令列表

add       svn add  
commit    svn ci  -m  ""
checkout  svn co  svn://  --username --password
cat       svn cat
del       svn del
diff      svn diff
cd
import   svn import  file:///var/svn/project -m ""
info     svn info  
log      svn log



######################################################

TortoisesSVN

windows版 
需要下载图形界面
###########################################

