
1.本案例要求编写脚本实现一键部署Nginx软件（Web服务器）：
一键源码安装Nginx软件
脚本自动安装相关软件的依赖包
脚本自动判断yum是否可用
 
#!/bin/bash
yum clean all

u=$(yum repolist |awk '/repolist/{print $2}' |sed 's/,//')

if [ $u -le 0 ];then
   echo 'yum 不可用' 
  exit
fi
   yum -y install make gcc openssl-devel pcre-dev

   mkdir /root/nginx

   tar -xf  /root/nginx-1.12.2.tar.gz  -C /root/nginx

   cd  /root/nginx/nginx-1.12.2/

   ./configure      #默认安装到 /usr/local
   make
   make install
    


验证方法
   /usr/local/nginx/sbin/nginx/ 
   /usr/local/nginx/sbin/nginx/ -s stop
   /usr/local/nginx/sbin/nginx/ -V
   
   ps aux|grep nginx


2.本案例要求编写Nginx启动脚本，要求如下：
脚本支持start、stop、restart、status
脚本支持报错提示
脚本具有判断是否已经开启或关闭的功能

#!/bin/bash

case $1 in

start)
   /usr/local/nginx/sbin/nginx&>/dev/null
   if [ $? -eq 0 ];then
     echo "启动成功！"
   else
     echo "已经启动！" 
   fi ;;
stop)
   /usr/local/nginx/sbin/nginx -s stop &>/dev/null
   if [ $? -eq 0 ];then
     echo "关闭成功！"
   else
     echo "已经关闭！" 
    fi ;;
restart)
   /usr/local/nginx/sbin/nginx -s stop &>/dev/null
   /usr/local/nginx/sbin/nginx
   if [ $? -eq 0 ];then
       echo "重启成功！"
   fi;;
status)
    netstat -ntulp|grep -q nginx
  if [ $? -eq 0 ];then
     echo  "服务已启动!"
  else
    echo "服务未启动!"
   fi;;
esac




3.本案例要求编写脚本，实现计算机各个性能数据监控的功能，具体监控项目要求如下：
CPU负载
网卡流量
内存剩余容量
磁盘剩余容量
计算机账户数量
当前登录账户数量
计算机当前开启的进程数量
本机已安装的软件包数量
top 最近1分钟的 、两分钟的 、15分钟的
#!/bin/bash

ip=`ifconfig eth0 | awk '/inet /{print $2}'`
echo "此主机的ip为 $ip"

c=`uptime|awk '{print $NF}'`
echo "此主机cpu $c"

f=`free -h | awk '/Mem/{print $4}'`
echo "剩余内存 $f"

d=`df -h|awk '{print $1,$4}'|column -t`
echo "$d"

p=`cat /etc/passwd|wc -l`
echo "计算机用户为$p 个"

w=`who |wc -l |awk '{print $1}'`
echo "正在登陆用户$w 个"
 
psa=`ps aux|wc -l`
echo "开启的进程$psa 个"

r=`rpm -qa|wc -l`
echo  "已安装$r个 rpm包"




4.本案例要求编写脚本，防止远程ssh暴力破解密码，具体监控项目要求如下：
检测ssh登录日志，如果远程登陆账号名错误3次，则屏蔽远程主机的IP
检测ssh登录日志，如果远程登陆密码错误3次，则屏蔽远程主机的IP

#!/bin/bash
u=`awk '/Failed/{print $11}' /var/log/secure|awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}'|awk '$1>3{print $2}'`
w=`awk'/Invaild/{print $10}' /var/log/secure|awk '{ip[$1]++}END{for(i in ip){print ip[i],i}}'|awk'$1>3{print $2}'`

for i in $u
do
  firewall-cmd  --permanent --zone=block --add-source=$i
  echo "$i 密码输错三次被block"
done

for j in $w
do 
  firewall-cmd --permannet --zone=blo0ck --add-source=$j
   echo "$j 用户名输错三次被block"
done

5.本案例要求编写脚本，实现带进程显示的复制脚本，具体要求如下：
默认Linux的cp命令不具有进度显示
我们需要自己编写脚本实现进度显示
可以使用进度条的方式，或者显示百分比的方式
#!/bin/bash
jingdu(){
while:
do
  echo -n '#'
  sleep 0.1
done
}
jingdu &
cp -r $1 $2
kill -9 $!






 
