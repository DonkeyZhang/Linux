条件测试的基本用法

1）语法格式
使用“test 表达式”或者[ 表达式 ]都可以，表达式两边至少要留一个空格。
条件测试操作本身不显示出任何信息。测试的条件是否成立主要体现在命令执行后的返回状态（即 $?），所以可以在测试后查看变量$?的值来做出判断，或者结合&&、||等逻辑操作显示出结果（或作其他操作） 。
步骤二：字符串测试

1）== 比较两个字符串是否相同
检查当前用户是否为root。
当root用户执行时：
[root@svr5 ~]# [ $USER == "root" ]         //测试
[root@svr5 ~]# echo $?                    //查看结果0为对，非0为错

当普通用户执行时：
[zengye@svr5 ~]$ [ $USER == "root" ]
[zengye@svr5 ~]$ echo $?                    //查看结果0为对，非0为错

2）!= 比较两个字符串是否不相同
当普通用户执行时：
[zengye@svr5 ~]$ [ $USER != "root" ] 
当root用户执行时：
[root@svr5 ~]# [ $USER != "root" ]

3）一行执行多条命令的情况
# A && B                        //仅当A命令执行成功，才执行B命令
# A || B                        //仅当A命令执行失败，才执行B命令  
# A ;  B                        //执行A命令后执行B命令，两者没有逻辑关系
# A && B || C                   //思考 
A执行成功 B执行成功  C不执行
A执行成功 B执行失败  C执行
A执行失败 B不执行    C执行

4) -z 检查变量的值是否未设置（空值）
[root@svr5 ~]# var1="nb" ; var2=""
[root@svr5 ~]# [ -z "$var1" ] && echo "空值" || echo "非空值"
非空值
[root@svr5 ~]# [ -z $var2 ] && echo "空值" || echo "非空值"
空值                                      //变量var2已设置，但无任何值，视为空
[root@svr5 ~]# [ ! -z $var1 ]                //测试var1是否为非空
还有一个-n可以测试变量是否不为空（相当于! -z）。zero

