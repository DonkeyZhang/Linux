1、驱动精灵
2、系统内核
3、图形--打开-选择文件--open-01010100 
图形太占用带宽，优化0.5ms goole 100k
一、Shell基础应用
1、切换用户的Shell环境
1、什么是shell？
Shell是在Linux内核与用户之间的解释器程序，通常指的是bash，负责向内核翻译及传达用户/程序指令
硬件-->系统内核->解释器->应用程序->
#shell是个概念  比如 shell是汽车，那bash就是宝马汽车，shell是包含了很多种解释器

2、shell的使用方式：
1.交互执行指令：人工干预，执行效率底。
2.非交互执行指令：安静地在后台执行，执行效率高，方便写脚本。
若需要临时使用另一种Shell环境，可以直接执行对应的Shell解释器程序，比如只要执行ksh可以切换到ksh命令行环境。
[root@svr5 ~]# yum -y install ksh              //若缺少ksh请先安装ksh包
[root@svr5 ~]# cat /etc/shells
/bin/sh8.4.255

/bin/bash
/sbin/nologin
/bin/tcsh
/bin/csh
/bin/ksh                                        //确认当前系统已识别ksh
#有多种解释器，bash是默认解释器，且是性能是最好的
root@svr5 ~]# ksh                               //进入ksh环境
[root@svr5]~# exit                              //返回到切换前的bash环境

useradd -s #指定解释器
usermod -s #修改解释器
若希望修改用户的登录Shell，管理员可以直接通过usermod（或useradd）命令设置。
比如，以下操作可将用户zhangsan的登录Shell改为/bin/ksh：
[root@svr5 ~]# usermod -s /bin/ksh zhangsan              //执行修改操作
[root@svr5 ~]# grep 'zhangsan' /etc/passwd
zhangsan:x:516:516::/home/zhangsan:/bin/ksh              //修改后


3、练习命令历史
1）检查历史命令的容量。
默认记录1000条，通过全局变量HISTSIZE设置，对所有用户有效：
[root@svr5 ~]# grep HISTSIZE /etc/profile
HISTSIZE=1000
查看已为当前用户记录的历史命令条数：
[root@svr5 ~]# history | wc -l
1000

2）查看历史命令列表。
列出最近执行的10条历史命令：
[root@svr5 ~]# history |tail                      //清空自己的历史命令

3）调用指定的历史命令。
重新执行历史命令列表中的第1028条操作：
[root@svr5 ~]# !1028
grep 'zhangsan' /etc/passwd
zhangsan:x:516:516::/home/zhangsan:/bin/bash

4）清空历史的命令。
[root@svr5 ~]# history -c                      //清空自己的历史命令
[root@svr5 ~]# > ~/.bash_history                  //清空记录文件 #> 前面是空的，重定进去变空
[root@svr5 ~]# history                          //再次检查历史命令列表
   42  > ~/.bash_history
   43  history

4、练习命令别名
1）查看已经定义的命令别名列表。
当前的别名列表：
[root@svr5 ~]# alias
alias cp='cp -i'
alias l.='ls -d .* --color=tty'

5、重定向标准输入/输出/错误输出
标准输入（stdin），描述号为0；
标准输出（stdout），描述号为1；
标准错误（stderr），描述号为2
>只输入正确的信息
2>只输入错误的信息
&>正确和错误的信息

6、管道操作实践

借助于管道符“|”，可以将一条命令的标准输出交给另一条命令处理，在一条命令行内可依次使用多个管道。

#输出 输入 管道将数据暂时存在内存条，性能高

二、简单Shell脚本的设计

一个规范的Shell脚本构成包括：
脚本声明（需要的解释器、作者信息等）
注释信息（步骤、思路、用途、变量含义等）
可执行语句（操作代码）



1、安装yum源
2、安装httpd
3、安装vsftpd
4、输出语句

三、使用Shell变量
1、变量的定义/赋值/查看

1）新建/赋值变量
新建变量test，赋值“hello world”，通过set命令可以检查变量设置：
[root@svr5 ~]# test=11

2）查看变量
通过echo $变量名 可输出变量值：
[root@svr5 ~]# echo $test
11
查看变量时，若变量名称与后面要输出的字符串连在一起，则应该以{}将变量名括起来以便区分：
[root@svr5 ~]# echo $testRMB              //无法识别变量名test
[root@svr5 ~]# echo ${test}RMB              //区分后可以识别
11RMB
3
）撤销自定义变量
若要撤销已有的变量，可使用unset命令：
[root@svr5 ~]# unset test                  //撤销变量test
[root@svr5 ~]# echo $test                  //查看时已无结果


2、使用环境变量

1）查看环境变量相关文件
全局文件为/etc/profile，对所有用户有效；用户文件为~/.bash_profile，仅对指定的用户有效。
查看/etc/profile文件内容：
[root@svr5 ~]# cat /etc/profile
.. ..
HOSTNAME=`/bin/hostname`
HISTSIZE=1000
.. ..
export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE INPUTRC
.. ..
2）使用环境变量
当前用户的环境变量USER记录了用户名、HOME记录了宿主目录、SHELL记录了登录Shell、HOSTNAME记录主机名、UID是用户的id号：
[root@svr5 ~]# echo $USER $HOME $SHELL $UID
root /root /bin/bash 0
[root@svr5 ~]# echo $HOSTNAME
svr5
环境变量PS1表示Shell环境的一级提示符，即命令行提示符（\u 用户名、\h 主机名、\W 工作目录、\$ 权限标识）：
[root@svr5 src]# echo $PS1                  //查看默认的一级提示
[\u@\h \W]\$
[root@svr5 src]#PS1='hehe#'                  //修改一级提示
hehe#                                      //更改结果
hehe# PS1='[\u@\h \W]\$ '                  //恢复原有设置
[root@svr5 src]# 
环境变量PS2表示二级提示符，出现在强制换行、at任务编辑等场合：
[root@svr5 ~]# echo $PS2                      //查看默认的二级提示
>
[root@svr5 src]# cd \                     //强制换行，观察提示符效果
> /root/
[root@svr5 ~]# PS2='=> '                      //手动修改二级提示
[root@svr5 ~]# cd \                          //再8.4.255
次验证提示符效果
=> ~
[root@svr5 ~]# PS2='> '                     //恢复原有设置

3）查看系统变量
使用env可查看所有环境变量：
[root@svr5 src]# env
HOSTNAME=svr5.tarena.com
SHELL=/bin/bash
HISTSIZE=1000
SSH_CLIENT=192.168.4.110 59026 22
OLDPWD=/root
SSH_TTY=/dev/pts/0
USER=root
.. ..
使用set可查看所有变量（包括env能看到的环境变量）：
[root@svr5 src]# set
BASH=/bin/bash
BASH_ARGC=()
BASH_ARGV=()
BASH_LINENO=()
.. ..

3、使用位置变量与预定义变量

1）创建一个测试脚本，用来展示。
[root@svr5 ~]# vim location.sh
#!/bin/bash
echo $0                                        //脚本的名称
echo $1                                        //第一个参数
echo $2                                        //第二个参数
echo $*                                        //所有参数
echo $#                                        //所有的综合de 
echo $$                                        //当前进程的进程号
echo $?                                        //上一个程序的返回状态码
echo $!                                        // 上一个命令程序的PID
[root@svr5 ~]# chmod +x location.sh              //添加可执行权限

2）执行脚本location.sh，细心观察结果（高明的武功需要用心参悟）。
[root@svr5 ~]# ./location.sh one 1 2 abc qq 8 7



4、创建账户与修改密码的脚本

1）编写脚本。
[root@svr5 ~]# vim /root/user.sh
#!/bin/bash
useradd $1
echo "$2" |passwd --stdin $1 
执行脚本测试：
[root@svr5 ~]# ./user.sh jerry  123456
更改用户 jerry 的密码 。

4、
#!/bin/bash
descrption: 描述
version:1.0

#！/bin/bash
/etc/yum.repos.d/yum.repo
[yum]
name=yum
baseurl
不能数字开头，特殊符号
env(environment)
set(所有的变量）


四、变量的扩展应用

1、三种引号对变量赋值的影响

1）双引号的应用
使用双引号可以界定一个完整字符串。
[root@svr5 ~]# xx=Tarena IT Group
-bash: IT: command not found                      //未界定时赋值失败
[root@svr5 ~]# xx="Tarena IT Group"              //界定后成功
[root@svr5 ~]# touch aa bb                      //创建了两个文件
[root@svr5 ~]# touch "aa bb"                    //创建了一个文件
[root@svr5 ~]# ls                                //查看结果
2）单引号的应用
界定一个完整的字符串，并且可以实现屏蔽特殊符号的功能。
[root@svr5 ~]# test=11
[root@svr5 ~]# echo "$test"
[root@svr5 ~]# echo '$test'
3）反撇号或$()的应用
使用反撇号或$()时，可以将命令执行的标准输出作为字符串存储，因此称为命令替换。
[root@svr5 ~]# tar -czf log-`date +%Y%m%d`.tar.gz /var/log

2、使用read命令从键盘读取变量值

1）read基本用法
执行后从会等待并接受用户输入（无任何提示的情况），并赋值给变量str：
[root@svr5 ~]# read str
What's happen ?                          //随便输入一些文字，按Enter键提交
[root@svr5 ~]# echo $str                  //查看赋值结果
What's happen ?
为了不至于使用户不知所措、莫名其妙，推荐的做法是结合-p选项给出友好提示：
[root@svr5 ~]# read -p "请输入一个整数：" i
请输入一个整数：240
[root@svr5 ~]# echo $i
240

2）stty终端显示控制
将回显功能关闭（stty -echo），
将回显功能恢复（stty echo）。
可参考下列操作创建一个测试脚本：
[root@svr5 ~]# vim user.sh              //创建一个测试脚本
#!/bin/bash
read -p "请输入用户名:"  username              //读取用户名
stty -echo                                  //关闭回显
read -p "请输入密码:"  passwd              //读取密码
stty echo                                  //恢复回显
echo ""                                      //恢复回显后补一个空行
useradd "$username"
echo "$passwd" | passwd --stdin "$username"
[root@svr5 ~]# chmod +x user.sh          //添加执行权限

执行测试脚本user.sh，验证效果：
[root@svr5 ~]# ./user.sh
请输入用户名:  root                          //输入root，回车
请输入密码:                                   //输入1234567（不会显示），回车

3、使用export发布全局变量

默认情况下，自定义的变量为局部变量，只在当前Shell环境中有效，而在子Shell环境中无法直接使用。比如已定义的SCHOOL变量，当进入到sh或bash子Shell后，变量SCHOOL将处于未定义的状态：
[root@svr5 ~]# yy="Tarena IT Group"
[root@svr5 ~]# echo $yy
Tarena IT Group
[root@svr5 ~]# bash                              //开启bash子进程
[root@svr5 ~]# echo $yy                          //查看SCHOOL变量值无结果
[root@svr5 ~]# exit                              //返回原有Shell环境
exit
[root@svr5 ~]# echo $yy
若希望定义的变量能被子进程使用，可以使用export命令将其发布为全局变量。使用export发布时，只需指定变量名（可以有多个）即可，也可以通过export命令直接设置新的全局变量：
[root@svr5 ~]# export yy                              //发布已定义的变量
[root@svr5 ~]# export XX="1234"                      //发布新变量
验证刚刚发布的全局变量：
[root@svr5 ~]# bash                                  //进入bash子Shell环境
[root@svr5 ~]# echo $yy                              //查看全局变量的值 .. ..
Tarena IT Group
[root@svr5 ~]# echo $XX
1234




























