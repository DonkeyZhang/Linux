###############################################

bind-9.9.4-29.el7.x86_64   //域名服务包
bind-chroot-9.9.4-29.el7.x86_64   //提供虚拟根支持

– 运行时的虚拟根环境:/var/named/chroot/    #牢笼政策
– 系统服务:named
– 默认端口: 53

• 主配置文件: /etc/named.conf   #设置本服务器负责解析的域名
• 地址库文件: /var/named/     #主机名与IP地址的对应关系




###############################################
在虚拟机A搭建DNS服务器          
负责解析baidu.com域名的DNS
最终在虚拟机B测试解析www.baidu.com----->192.168.10.1

虚拟机A：
[root@svr7 ~]# yum -y install bind bind-chroot
[root@svr7 ~]# vim /etc/named.conf
  zone "baidu.com"  IN {
        type master;
        file "baidu.com.zone";
    };
[root@svr7 ~]# cd /var/named/
[root@svr7 named]# cp -p tedu.cn.zone baidu.com.zone
[root@svr7 named]# vim baidu.com.zone
 baidu.com.  NS  svr7
 svr7         A  192.168.4.7
 www          A  192.168.10.1
[root@svr7 named]# systemctl restart name


虚拟机B:
# vim /etc/resolv.conf 
 nameserver 192.168.4.7

# nslookup www.baidu.com

#################################################
分离解析概述（视图解析）

• 当收到客户机的DNS查询请求的时候
  –  能够区分客户机的来源地址
  –  为不同类别的客户机提供不同的解析结果(IP地址)
  –  不同的客户端解析同一个域名时，解析结果不同
  –  为客户端提供最近的资源

• 环境及需求
– 权威DNS:svr7.tedu.cn 192.168.4.7
– 负责区域:tedu.cn
– A记录分离解析 —— 以 www.tedu.cn 为例

   客户机来自解析结果
           192.168.4.207  ------->   192.168.4.100
           其他地址            ------->   1.2.3.4

###############################################
分离解析的配置：

	view "联通"  {
	  match-clients  {  来源地址1; .. ..; }
      zone "12306.cn" IN {
            ...... 地址库1;
          }; };

	view "铁通"  {
	  match-clients {  来源地址2; .. .. ; }
      zone "12306.cn" IN {
            ...... 地址库2;
           }; };



分离解析注意事项：
 1.所有的客户端必须到要找到自己的分类
 2.类别的view匹配,由上及下，匹配及停止
 3.所有的zone都必须在view中

	view "nsd"  {
	  match-clients  {  192.168.4.207;  }；
      zone  "tedu.cn"  IN {
             type  master;
             file  "tedu.cn.zone";---->192.168.4.100
          }; };                                                        

	view  "other"  {
	  match-clients  {  any; }；
      zone "tedu.cn"  IN {
             type  master;
             file  "tedu.cn.other";---->1.2.3.4
           }; };
   然后在/var/named建立相应的地址库文件，写入不同的解析结果
     
################################################
针对来源地址定义acl列表
– 若地址比较少,也可以不建立列表
[root@svr7 ~]# vim /etc/named.conf
options {
directory "/var/named";
};
acl  test { 192.168.4.207; 192.168.7.0/24; 
                     192.168.10.1;  };

view "nsd" {
  match-clients {   test; };
  zone "tedu.cn" IN {
      type master;
      file "tedu.cn.zone";
   };
################################################
多区域的分离解析
注意事项：每一个view中，zone的个数一致
options {
        directory       "/var/named";
};
acl  test { 192.168.4.207; 192.168.7.0/24; 192.168.10.1;  };

view "nsd" {
  match-clients {   test; };
  zone "tedu.cn" IN {
      type master;
      file "tedu.cn.zone";
   };
  zone "qq.com" IN {
      type master;
      file "qq.com.zone";
   };
};
view "other" {
  match-clients { any; };
  zone "tedu.cn" IN {
      type master;
      file "tedu.cn.other";
   };
  zone "qq.com" IN {
      type master;
      file "qq.com.other";
   };
};

##################################################
RAID磁盘阵列

• 廉价冗余磁盘阵列
– Redundant Arrays of Inexpensive Disks
– 通过硬件/软件技术,将多个较小/低速的磁盘整合成一个大磁盘

– 阵列的价值:提升I/O效率、硬件级别的数据冗余
– 不同RAID级别的功能、特性各不相同


• RAID 0,条带模式
– 同一个文档分散存放在不同磁盘
– 并行写入以提高效率,无容错功能
– 至少需要两块磁盘组成

• RAID 1,镜像模式
– 一个文档复制成多份,分别写入不同磁盘
– 多份拷贝提高可靠性,效率无提升
– 至少需要两块磁盘组成

• RAID5,高性价比模式
– 相当于RAID0和RAID1的折中方案
– 需要至少一块磁盘的容量来存放校验数据
– 至少需要三块磁盘组成

• RAID6,高性价比/可靠模式
– 相当于扩展的RAID5阵列,提供2份独立校验方案
– 需要至少两块磁盘的容量来存放校验数据
– 至少需要四块磁盘组成
################################################
进程管理

一、进程的简介

   1.程序：静态的代码，仅仅占用磁盘空间

   2.进程：正在运行的代码，会占用CPU与内存

    父进程与子进程，后台整个进程，进程树
    进程唯一标识编号：PID  

二、查看进程
 systemd:Linux运行的第一个进程，由内核直接运行
                 所有进程的父进程
• 常用命令选项
– -a:显示完整的命令行
– -p:列出对应PID编号
– -u:指定用户名

[root@svr7 /]# pstree           #查看整个进程树
[root@svr7 /]# pstree -u lisi   #查看lisi开启的进程
[root@svr7 /]# pstree -pu lisi
[root@svr7 /]# pstree -apu lisi

[root@svr7 /]# pstree  lisi
[root@svr7 /]# pstree  -ap lisi
[root@svr7 /]# 


• ps aux 操作(进程的信息详细)
– 列出正在运行的所有进程

用户 进程ID %CPU %内存 虚拟内存 固定内存 终端 状态 起始时间 CPU时间 程序指令

• ps -elf 操作  (进程的父进程的信息PPID)
– 列出正在运行的所有进程

[root@svr7 /]# ps aux | grep lisi

进程动态排名
• top 交互式工具
– 格式:top [-d 刷新秒数] [-U 用户名]

[root@svr7 /]# top -d 1 
     按键盘大写的P，进行CPU排序
     按键盘大写的M，进行内存排序
     按键盘的q,退出 
    
查询进程的指令
• pgrep — Process Grep
• 常用命令选项
– -l:输出进程名,而不仅仅是 PID
– -U:检索指定用户的进程
– -t:检索指定终端的进程
– -x:精确匹配完整的进程名   

[root@svr7 /]# pgrep -l crond    #-l显示进程名字
[root@svr7 /]# pgrep -l log
[root@svr7 /]# pgrep crond

[root@svr7 /]# a=`pgrep crond`    #将命令的输出赋值给变量
[root@svr7 /]# echo $a

[root@svr7 /]# pgrep -U lisi      #检索指定用户
[root@svr7 /]# pgrep -lU lisi
[root@svr7 /]# pgrep -lx systemd  #检索进程名，严格匹配

  pts:图形命令行
[root@svr7 /]# who        #查看正在登陆用户信息
[root@svr7 /]# pgrep -lU lisi
[root@svr7 /]# pgrep -lU lisi -t pts/2
     -t：指定检索的终端
###############################################
查看进程的命令：
     pstree： 结构鲜明，可以查看整个进程树 
     ps aux： 查看正在运行的所有进程，信息非常全面
     ps -elf 查看正在运行的所有进程，信息中有父进程的信息
     top：动态，可以进行排名
     pgrep：选项众多，用于检索进行信息，方便脚步中变量赋值

#################################################
进程的前后台调度

将进程放入后台启动
– 在命令行末尾添加“&”符号,不占用当前终
– Ctrl + z 组合键：将正在运行的进程(暂停并转入后台)

• jobs 命令
– 查看后台任务列表
• fg 命令
– 将后台任务恢复到前台运行
• bg 命令
– 激活后台被暂停的任务

[root@svr7 /]# sleep  1000 &    #正在运行放入后台
[root@svr7 /]# jobs 
[root@svr7 /]# sleep 2000
^Z                           #输入Ctrl+z暂停放入后台 
[2]+  已停止               sleep 2000
[root@svr7 /]# jobs          #查看后台任务
[root@svr7 /]# bg 2    #让后台编号为2的任务  继续运行
[root@svr7 /]# jobs 
[root@svr7 /]# fg 2    #让后台编号为2的任务  恢复到前台
sleep 2000
^C                     #输入Ctrl+c结束进程
[root@svr7 /]# jobs
[root@svr7 /]# fg 1    #让后台编号为1的任务  恢复到前台
sleep 1000
^C
[root@svr7 /]# jobs 

#################################################
杀死进程

• 干掉进程的不同方法
– Ctrl+c 组合键,中断当前命令程序
– kill [-9]   PID... 
– killall [-9] 进程名...
– pkill  查找条件

     [-9]:强制杀死
[root@svr7 /]# sleep 1000 &      
[root@svr7 /]# sleep 2000 &
[root@svr7 /]# sleep 3000 &
[root@svr7 /]# jobs -l
[root@svr7 /]# kill 14986
[root@svr7 /]# jobs -l

[root@svr7 /]# jobs -l
[root@svr7 /]# killall sleep   #杀死所有叫sleep
[root@svr7 /]# jobs -l

[root@svr7 /]# sleep 4000 &
[root@svr7 /]# jobs
[root@svr7 /]# killall -9 sleep
[root@svr7 /]# jobs


##############################################
日志管理

• 系统和程序的“日记本”
– 记录系统、程序运行中发生的各种事件
– 通过查看日志,了解及排除故障
– 信息安全控制的依据

• 由系统服务rsyslog统一记录/管理

• 常见的日志文件

  /var/log/messages 记录内核消息、各种服务的公共消息
  /var/log/dmesg    记录系统启动过程的各种消息
  /var/log/cron     记录与cron计划任务相关的消息
  /var/log/maillog  记录邮件收发相关的消息
  /var/log/secure   记录与访问限制相关的安全消息


日志分析
• 通用分析工具
– tail、tailf、less、grep等文本浏览/检索命令
– awk、sed等格式化过滤工具

   tailf:实时跟踪信息
[root@svr7 /]# echo 123  > /opt/1.txt
[root@svr7 /]# tailf /opt/1.txt 
123
haha


用户登录分析
• users、who、w 命令
– 查看已登录的用户信息,详细度不同

• last、lastb 命令
– 查看最近登录成功/失败的用户信息

[root@svr7 /]# users
[root@svr7 /]# who
[root@svr7 /]# w

[root@svr7 /]# last -2
[root@svr7 /]# lastb -2

###########################################
• Linux内核定义的事件紧急程度
– 分为 0~7 共8种优先级别
– 其数值越小,表示对应事件越紧急/重要

  0  EMERG（紧急）        会导致主机系统不可用的情况
  1  ALERT（警告）         必须马上采取措施解决的问题
  2  CRIT（严重）	        比较严重的情况
  3  ERR（错误）	       运行出现错误
  4  WARNING（提醒）    可能会影响系统功能的事件
  5  NOTICE（注意）      不会影响系统但值得注意
  6  INFO（信息）	      一般信息
  7  DEBUG（调试）      程序或系统调试信息等

使用journalctl工具
• 提取由 systemd-journal 服务搜集的日志
– 主要包括内核/系统日志、服务日志
• 常见用法
– journalctl -u 服务名 [-p 优先级]

– journalctl | grep 关键词
– journalctl -n 消息条数
– journalctl --since="yyyy-mm-dd HH:MM:SS" --
until="yyyy-mm-dd HH:MM:SS"



[root@svr7 /]# yum -y install httpd
[root@svr7 /]# systemctl restart httpd

显示httpd服务，日志消息在6级别以上的信息
[root@svr7 /]# journalctl -u httpd  -p 6
    
显示named服务，日志消息在6级别以上的信息
[root@svr7 /]# journalctl -u named  -p 6

###########################################
systemctl控制

• Linux系统和服务管理器
– 是内核引导之后加载的第一个初始化进程(PID=1)
– 负责掌控整个Linux的运行/服务资源组合

对于服务的管理
 systemctl restart  服务名   #重起服务
 systemctl start  服务名       #开启服务
 systemctl stop  服务名         #停止服务
 systemctl status  服务名     #查看服务当前的状态
 
 systemctl enable  服务名      #设置服务开机自启动
 systemctl disable  服务名    #设置服务不开机自启动
 systemctl enable  服务名 

#查看是否开机自启动
[root@svr7 /]# systemctl is-enabled httpd  
disabled  #禁止开机启动
[root@svr7 /]# systemctl enable httpd

[root@svr7 /]# systemctl is-enabled httpd
enabled  #允许开机启动
[root@svr7 /]#

systemd
• 一个更高效的系统&服务管理器
– 开机服务并行启动,各系统服务间的精确依赖

– 服务目录:/lib/systemd/system/

[root@svr7 /]# vim /lib/systemd/system/httpd.service



RHEL6:运行级别  200

        0：关机  
        1：单用户模式（基本功能的实现，破解Linux密码） 
	2：多用户字符界面（不支持网络）
	3：多用户字符界面（支持网络）服务器默认的运行级别 
	4：未定义
	5：图形界面  
	6：重起
   
    切换运行级别：init  数字

    
RHEL7：运行模式

   字符模式：multi-user.target
   图形模式：graphical.target

当前直接切换到图形模式
[root@svr7 /]# systemctl isolate graphical.target
当前直接切换到字符模式
[root@svr7 /]# systemctl isolate multi-user.target

查看每次开机默认进入模式
# systemctl get-default
 multi-user.target

设置永久策略，每次开机自动进入graphical.target
# systemctl set-default graphical.target 
# reboot 
#################################################






  

















  www.qq.com.   www.tedu.cn.
